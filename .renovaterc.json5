{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:recommended',
    'docker:enableMajor',
    'helpers:pinGitHubActionDigests',
    ':automergeBranch',
    ':dependencyDashboard',
    ':disableRateLimiting',
    ':semanticCommits',
    ':timezone(America/New_York)',
  ],
  assignees: ['tscibilia'],
  // enabledManagers: [
  //   'github-actions'
  // ],
  dependencyDashboard: true,
  dependencyDashboardTitle: 'Renovate Dashboard ðŸ¤–',
  dependencyDashboardApproval: false,
  platformAutomerge: true,
  prConcurrentLimit: 0,
  prHourlyLimit: 10,
  suppressNotifications: [
    'prEditedNotification',
    'prIgnoreNotification',
  ],
  ignorePaths: [
    '**/*.sops.*',
    '**/resources/**',
  ],
  flux: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  'helm-values': {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  helmfile: {
    fileMatch: [
      '(^|/)helmfile\\.ya?ml(?:\\.j2)?$',
    ],
  },
  kubernetes: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  packageRules: [
    {
      description: 'Actions Runner Controller Group',
      groupName: 'Actions Runner Controller',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/gha-runner-scale-set-controller/',
        '/gha-runner-scale-set/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      description: 'Cert-Manager Group',
      groupName: 'Cert-Manager',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/cert-manager/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      description: 'Cilium Group',
      groupName: 'Cilium',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/cilium/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      description: 'CoreDNS Group',
      groupName: 'CoreDNS',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/coredns/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      description: 'External Secrets Operator Group',
      groupName: 'External Secrets Operator',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/external-secrets/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      description: 'Flux Operator Group',
      groupName: 'Flux Operator',
      matchPackageNames: [
        '/flux-operator/',
        '/flux-instance/',
      ],
      matchDatasources: [
        'docker',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      description: "Immich Group",
      groupName: "Immich",
      matchPackageNames: ["/immich/"],
      matchDatasources: ["docker"],
      group: {commitMessageTopic: "{{{groupName}}}"},
      separateMinorPatch: true,
      sourceUrl: "https://github.com/immich-app/immich",
    },
    {
      description: 'Rook-Ceph Group',
      groupName: 'Rook-Ceph',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/rook-ceph/',
        '/rook-ceph-cluster/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      "description": "CloudNativePG Barman Cloud",
      "groupName": "cloudnative-pg plugin-barman-cloud",
      "matchPackagePatterns": [
        "cloudnative-pg/plugin-barman-cloud",
        "plugin-barman-cloud"
      ],
      "matchDatasources": [
        "docker",
        "github-releases"
      ],
      "group": {
        "commitMessageTopic": "{{{groupName}}}"
      },
      "separateMinorPatch": true,
      "sourceUrl": "https://github.com/cloudnative-pg/plugin-barman-cloud"
    },
    {
      description: 'Spegel Group',
      groupName: 'Spegel',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        '/spegel/',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
    },
    {
      description: 'Allow postgres versions <17',
      matchDatasources: [
        'docker',
      ],
      allowedVersions: '<17',
      matchPackageNames: [
        '/postgresql/',
        '/postgres-backup-local/',
      ],
    },
    {
      "description": ["Only update SearXNG when minor version changes"],
      "matchDatasources": ["docker"],
      "matchPackagePatterns": ["searxng"],
      "extractVersion": "^([0-9]+\\.[0-9]+\\.[0-9]+)",
      "semanticCommits": false,
      "major": {
        "enabled": true
      },
      "minor": {
        "enabled": true
      },
      "patch": {
        "enabled": false
      }
    },
    {
      description: 'Donâ€™t open PRs for this image at all',
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        'ghcr.io/mdhiggins/sonarr-sma',
        'ghcr.io/mdhiggins/radarr-sma',
      ],
      enabled: false,
    },
    {
      description: 'Auto-merge trusted container digests',
      matchDatasources: [
        'docker',
      ],
      automerge: true,
      automergeType: 'pr',
      matchUpdateTypes: [
        'digest',
      ],
      matchPackageNames: [
        '/home-operations/',
      ],
      ignoreTests: false,
    },
    {
      description: 'Auto-merge GitHub Actions for minor & patch',
      matchManagers: [
        'github-actions',
      ],
      automerge: true,
      automergeType: 'branch',
      matchUpdateTypes: [
        'minor',
        'patch',
        'digest',
      ],
      minimumReleaseAge: '3 days',
      ignoreTests: true,
    },
    {
      description: 'Auto-merge trusted GitHub Actions',
      matchManagers: [
        'github-actions',
      ],
      matchPackageNames: [
        '/^actions//',
      ],
      automerge: true,
      automergeType: 'branch',
      matchUpdateTypes: [
        'minor',
        'patch',
        'digest',
      ],
      minimumReleaseAge: '1 minute',
      ignoreTests: true,
    },
    {
      matchUpdateTypes: [
        'major',
      ],
      semanticCommitType: 'feat',
      commitMessagePrefix: '{{semanticCommitType}}({{semanticCommitScope}})!:',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      commitMessageExtra: '( {{currentVersion}} â†’ {{newVersion}} )',
    },
    {
      matchUpdateTypes: [
        'digest',
      ],
      semanticCommitType: 'chore',
      commitMessageExtra: '( {{currentDigestShort}} â†’ {{newDigestShort}} )',
    },
    {
      matchDatasources: [
        'docker',
      ],
      semanticCommitScope: 'container',
      commitMessageTopic: 'image {{depName}}',
    },
    {
      matchDatasources: [
        'helm',
      ],
      semanticCommitScope: 'helm',
      commitMessageTopic: 'chart {{depName}}',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      semanticCommitType: 'ci',
      semanticCommitScope: 'github-action',
      commitMessageTopic: 'action {{depName}}',
    },
    {
      matchDatasources: [
        'github-releases',
      ],
      semanticCommitScope: 'github-release',
      commitMessageTopic: 'release {{depName}}',
    },
    {
      matchUpdateTypes: [
        'major',
      ],
      labels: [
        'type/major',
      ],
    },
    {
      matchUpdateTypes: [
        'minor',
      ],
      labels: [
        'type/minor',
      ],
    },
    {
      matchUpdateTypes: [
        'patch',
      ],
      labels: [
        'type/patch',
      ],
    },
    {
      matchUpdateTypes: [
        'digest',
      ],
      labels: [
        'type/digest',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      addLabels: [
        'renovate/container',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      addLabels: [
        'renovate/helm',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      addLabels: [
        'renovate/github-action',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
      ],
      addLabels: [
        'renovate/github-release',
      ],
    },
  ],
  customManagers: [
    {
      customType: "regex",
      description: "Process annotated dependencies",
      fileMatch: [
        "(^|/).+\\.env$",
        "(^|/).+\\.sh$",
        "(^|/).+\\.ya?ml(?:\\.j2)?$",
      ],
      matchStrings: [
        // # renovate: datasource=github-releases depName=k3s-io/k3s
        // k3s_release_version: &version v1.29.0+k3s1
        // # renovate: datasource=helm depName=cilium repository=https://helm.cilium.io
        // version: 1.15.1
        // # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
        // KUBERNETES_VERSION=v1.31.1
        "datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+(:\\s|=)(&\\S+\\s)?(?<currentValue>\\S+)",
        // # renovate: datasource=docker depName=ghcr.io/prometheus-operator/prometheus-operator
        // https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.80.0/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagerconfigs.yaml
        "datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)\\n.+/(?<currentValue>(v|\\d)[^/]+)",
      ],
      datasourceTemplate: "{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}",
    },
    {
      customType: "regex",
      description: "Bump mdhiggins/*arr-sma when home-operations/*arr releases",
      fileMatch: [
        "^Dockerfile$",
        "^.*\\.helmrelease\\.ya?ml$",
      ],
      matchStrings: [
        "ghcr\\.io/mdhiggins/(?<upstream>sonarr|radarr)-sma:(?<currentValue>\\S+)"
      ],
      datasourceTemplate: "docker",
      depNameTemplate: "ghcr.io/home-operations/{{ upstream }}",
      versioningTemplate: "semver",
    },
  ]
}
