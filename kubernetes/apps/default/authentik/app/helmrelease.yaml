---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: authentik
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 2025.6.1
  url: oci://ghcr.io/goauthentik/helm-charts/authentik
---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app authentik
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: authentik
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    global:
      fullnameOverride: *app
      podAnnotations:
        secret.reloader.stakater.com/reload: &secret authentik-secret
      deploymentStrategy:
        type: RollingUpdate
      env:
        - name: AUTHENTIK_REDIS__HOST
          value: "dragonfly-cluster.database.svc.cluster.local"
        - name: AUTHENTIK_REDIS__DB
          value: "1"
        - name: AUTHENTIK_POSTGRESQL__NAME
          value: *app
        - name: AUTHENTIK_POSTGRESQL__USER
          value: *app
        - name: AUTHENTIK_HOST
          value: "https://${GATUS_SUBDOMAIN}.${SECRET_DOMAIN}"
        - name: AUTHENTIK_STORAGE__MEDIA__BACKEND
          value: file
      envFrom:
        - secretRef:
            name: *secret
      outposts:
        container_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      volumes:
        - name: custom-css
          configMap:
            name: authentik-customize
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
      volumeMounts:
        - name: custom-css
          mountPath: /web/dist/custom.css
          subPath: custom.css
          readOnly: true
        - name: media
          mountPath: /media
          subPath: torrents/sso
    authentik:
      error_reporting:
        enabled: false
    server:
      replicas: 1
      initContainers:
        01-init-db:
          image:
            repository: ghcr.io/home-operations/postgres-init:17
          envFrom:
            - secretRef:
                name: authentik-initdb-secret
      ingress:
        enabled: true
        ingressClassName: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
        hosts: ["${GATUS_SUBDOMAIN}.${SECRET_DOMAIN}"]
      livenessProbe: &probes
        enabled: true
        custom: true
        initialDelaySeconds: 10
        timeoutSeconds: 5
        periodSeconds: 10
        failureThreshold: 3
      readinessProbe: *probes
      startupProbe:
        enabled: false
      resources:
        requests:
          cpu: 100m
          memory: 512Mi
        limits:
          memory: 1Gi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
    worker:
      replicas: 1
      livenessProbe: &probes
        enabled: true
        custom: true
        exec:
          command: ["ak", "healthcheck"]
        initialDelaySeconds: 30
        timeoutSeconds: 5
        periodSeconds: 30
        failureThreshold: 5
      readinessProbe: *probes
      startupProbe:
        enabled: false
      resources:
        requests:
          cpu: 50m
          memory: 512Mi
        limits:
          memory: 1Gi