---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app authentik
spec:
  chartRef:
    kind: OCIRepository
    name: *app
  interval: 1h
  values:
    global:
      fullnameOverride: *app
      podAnnotations:
        secret.reloader.stakater.com/reload: &secret authentik-secret
      deploymentStrategy:
        type: RollingUpdate
      env:
        - name: AUTHENTIK_REDIS__HOST
          value: "dragonfly-cluster.database.svc.cluster.local"
        - name: AUTHENTIK_REDIS__DB
          value: "1"
        - name: AUTHENTIK_POSTGRESQL__NAME
          value: *app
        - name: AUTHENTIK_POSTGRESQL__USER
          value: *app
        - name: AUTHENTIK_HOST
          value: "https://${GATUS_SUBDOMAIN}.${SECRET_DOMAIN}"
        - name: AUTHENTIK_POSTGRESQL__PASSWORD
          valueFrom:
            secretKeyRef:
              name: authentik-pguser-secret
              key: password
        - name: AUTHENTIK_POSTGRESQL__HOST
          valueFrom:
            secretKeyRef:
              name: authentik-pguser-secret
              key: host
      envFrom:
        - secretRef:
            name: *secret
      outposts:
        container_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      volumes:
        - name: custom-css
          configMap:
            name: authentik-customize
      volumeMounts:
        - name: custom-css
          mountPath: /web/dist/custom.css
          subPath: custom.css
          readOnly: true
    *app :
      error_reporting:
        enabled: false
    server:
      replicas: 1
      initContainers:
        - name: 01-init-db
          image: ghcr.io/home-operations/postgres-init:17
          envFrom:
            - secretRef:
                name: "{{ .Release.Name }}-initdb-secret"
      ingress:
        enabled: true
        ingressClassName: external
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
          gatus.home-operations.com/endpoint: |-
            client:
              dns-resolver: tcp://1.1.1.1:53
            group: external
        hosts: ["${GATUS_SUBDOMAIN}.${SECRET_DOMAIN}"]
      livenessProbe: &probes
        enabled: true
        custom: true
        initialDelaySeconds: 10
        timeoutSeconds: 5
        periodSeconds: 10
        failureThreshold: 3
      readinessProbe: *probes
      startupProbe:
        enabled: false
      resources:
        requests:
          cpu: 100m
          memory: 512Mi
        limits:
          cpu: "1"
          memory: 1Gi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
    worker:
      autoscaling:
        enabled: true
        minReplicas: 1
        maxReplicas: 3
        targetCPUUtilizationPercentage: 85
      livenessProbe: &probes
        enabled: true
        custom: true
        exec:
          command: ["ak", "healthcheck"]
        initialDelaySeconds: 30
        timeoutSeconds: 5
        periodSeconds: 30
        failureThreshold: 5
      readinessProbe: *probes
      startupProbe:
        enabled: false
      resources:
        requests:
          cpu: 250m
          memory: 512Mi
        limits:
          memory: 1.25Gi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true