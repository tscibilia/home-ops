---
# yaml-language-server: $schema=https://github.com/datreeio/CRDs-catalog/raw/refs/heads/main/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: immich
spec:
  instances: 3
  imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16-v0.3.0
  primaryUpdateStrategy: unsupervised
  primaryUpdateMethod: switchover
  storage:
    size: 20Gi
    storageClass: openebs-hostpath
  # bootstrap:
  #   initdb:
  #     database: immich
  #     owner: immich
  #     secret:
  #       name: immich-cnpg-initdb
  #     postInitApplicationSQL:
  #       - CREATE EXTENSION IF NOT EXISTS "vectors";
  #       - CREATE EXTENSION IF NOT EXISTS "earthdistance" CASCADE;
  #       - ALTER DATABASE immich SET search_path TO "$user", public, vectors;
  #       - ALTER SCHEMA vectors OWNER TO immich;
  #       - GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA vectors TO immich;
  superuserSecret:
    name: cnpg-secret
  enableSuperuserAccess: true
  postgresql:
    shared_preload_libraries:
      - vectors.so
    pg_hba:
      - host all all 10.42.0.0/16 scram-sha-256
    parameters:
      max_connections: "600"
      shared_buffers: 256MB
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
  resources:
    requests:
      cpu: 500m
    limits:
      memory: 2Gi
  monitoring:
    enablePodMonitor: true

  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://${AWS_CNPG_BUCKET}
      endpointURL: https://${AWS_ENDPOINT}
      # Note: serverName version needs to be incremented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster immich-v2
      s3Credentials:
        accessKeyId:
          name: cnpg-secret
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: cnpg-secret
          key: AWS_SECRET_ACCESS_KEY

  # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster