---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          ffmpeg-init:
            image:
              repository: ghcr.io/ghcr-library/alpine
              tag: "3.12.1@sha256:d7342993700f8cd7aba8496c2d0e57be0666e80b4c441925fc6f9361fa81d10e"
            command:
              - sh
              - -c
              - |
                set -eux
                wget -qO /tmp/ffmpeg.tar.xz "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz" \
                && mkdir -p /tmp/ffmpeg-extract \
                && tar -xJ -f /tmp/ffmpeg.tar.xz -C /tmp/ffmpeg-extract \
                && mkdir -p /usr/local/sma/bin \
                && cp /tmp/ffmpeg-extract/ffmpeg-*-static/ffmpeg /usr/local/sma/bin/ \
                && cp /tmp/ffmpeg-extract/ffmpeg-*-static/ffprobe /usr/local/sma/bin/ \
                && chmod +x /usr/local/sma/bin/* \
                && chown 1044:100 /usr/local/sma/bin/*
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
              runAsGroup: 0
              fsGroup: 0
          sma-init:
            image:
              repository: docker.io/library/python
              tag: "3.13-slim@sha256:60248ff36cf701fcb6729c085a879d81e4603f7f507345742dc82d4b38d16784"
            command:
              - sh
              - -c
              - |
                set -eux
                apt-get update && apt-get install -y --no-install-recommends git \
                && rm -rf /var/lib/apt/lists/* \
                && mkdir -p /usr/local/sma \
                && git clone --depth=1 https://github.com/mdhiggins/sickbeard_mp4_automator.git /tmp/radarr-sma \
                && cp -a /tmp/radarr-sma/* /usr/local/sma/ && rm -rf /tmp/radarr-sma \
                && python3 -m venv /usr/local/sma/venv \
                && rm /usr/local/sma/venv/bin/python3 \
                && cp $(which python3) /usr/local/sma/venv/bin/python3 \
                && chmod +x /usr/local/sma/venv/bin/python3 \
                && /usr/local/sma/venv/bin/pip install --upgrade pip \
                && /usr/local/sma/venv/bin/pip install --no-cache-dir \
                  -r /usr/local/sma/setup/requirements.txt \
                && chown -R 1044:100 /usr/local/sma
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
              runAsGroup: 0
              fsGroup: 0
          extras-init:
            image:
              repository: ghcr.io/ghcr-library/alpine
              tag: "3.12.1@sha256:d7342993700f8cd7aba8496c2d0e57be0666e80b4c441925fc6f9361fa81d10e"
            command:
              - sh
              - -c
              - |
                set -eux
                mkdir -p /usr/local/sma \
                && wget -qO /usr/local/sma/postRadarr.sh \
                  https://raw.githubusercontent.com/mdhiggins/radarr-sma/master/extras/postRadarr.sh \
                && chmod +x /usr/local/sma/postRadarr.sh \
                && chown 1044:100 /usr/local/sma/postRadarr.sh
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
              runAsGroup: 0
              fsGroup: 0
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: "5.23.1.9914@sha256:794fb31c2773491429cdf50906443c301c61298b1e53f1e95ccf723c30c73d3f"
            env:
              TZ: ${TIMEZONE}
              SMA_PATH: /usr/local/sma
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: 'False'
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 7878
              RADARR__UPDATE__BRANCH: develop
            envFrom:
              - secretRef:
                  name: radarr-secret
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                memory: 2Gi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            securityContext:
              seccompProfile: { type: RuntimeDefault }
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ['ALL'] }
          sma-hook:
            image:
              repository: docker.io/library/python
              tag: "3.13-slim@sha256:60248ff36cf701fcb6729c085a879d81e4603f7f507345742dc82d4b38d16784"
            env:
              - name: SMA_PATH
                value: /usr/local/sma
            command:
              - sh
              - -c
              - |
                set -eux
                /usr/local/sma/venv/bin/pip install --no-cache-dir fastapi uvicorn
                cat << 'EOF' > /usr/local/sma/hook.py
                from fastapi import FastAPI, Request
                import subprocess, json, os
                app = FastAPI()
                @app.post("/hook")
                async def hook(req: Request):
                  data = await req.json()
                  subprocess.run([
                    "/usr/local/sma/venv/bin/python3",
                    "/usr/local/sma/postRadarr.py",
                    json.dumps(payload)
                  ], check=False)
                  return {"ok": True}
                EOF
                exec /usr/local/sma/venv/bin/uvicorn hook:app \
                  --host 0.0.0.0 --port 9000 \
                  --app-dir /usr/local/sma
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1044
        runAsGroup: 100
        fsGroup: 100
        fsGroupChangePolicy: OnRootMismatch
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    ingress:
      app:
        className: internal
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        existingClaim: *app
      config-cache:
        existingClaim: radarr-cache
        globalMounts:
          - path: /config/MediaCover
      config-sma:
        type: emptyDir
        globalMounts:
          - path: /usr/local/sma
      config-file:
        type: secret
        name: sma-configmap-secret
        advancedMounts:
          radarr:
            app:
              - path: /usr/local/sma/config/autoProcess.ini
                subPath: autoProcess.ini
      media:
        type: persistentVolumeClaim
        existingClaim: pvc-media-nfs
        globalMounts:
          - path: /movies
            subPath: Movies
          - path: /downloads
            subPath: Torrents
      tmp:
        type: emptyDir